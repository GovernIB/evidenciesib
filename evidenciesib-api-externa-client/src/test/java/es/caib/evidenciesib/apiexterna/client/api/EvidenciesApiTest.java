/*
 * API REST EXTERNA de EvidenciesIB
 * Conjunt de Serveis REST de EvidenciesIB per ser accedits des de l'exterior
 *
 * OpenAPI spec version: 1.0.0
 * Contact: governdigital@fundaciobit.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package es.caib.evidenciesib.apiexterna.client.api;

import es.caib.evidenciesib.apiexterna.client.services.ApiClient;
import es.caib.evidenciesib.apiexterna.client.services.ApiException;
import es.caib.evidenciesib.apiexterna.client.model.EvidenciaWs;
import es.caib.evidenciesib.apiexterna.client.model.ConstantsWs;
import es.caib.evidenciesib.apiexterna.client.model.EvidenciaFile;
import es.caib.evidenciesib.apiexterna.client.model.EvidenciaFileBase64;
import es.caib.evidenciesib.apiexterna.client.model.EvidenciaStartRequest;
import es.caib.evidenciesib.apiexterna.client.model.EvidenciaStartResponse;
import es.caib.evidenciesib.apiexterna.client.model.EvidenciaWsPaginacio;
import org.junit.Test;


import org.apache.commons.codec.binary.Base64;
import org.junit.Ignore;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.Properties;

/**
 * API tests for EvidenciesApi
 */
@Ignore
public class EvidenciesApiTest extends ConstantsWs {

    public static final String MIME_APPLICATION_PDF = "application/pdf";

    public static void main(String[] args) {
        try {

            Properties props = new Properties();
            props.load(new FileInputStream(new File("test.properties")));

            EvidenciesApi api = getApi(props);

            EvidenciesApiTest test = new EvidenciesApiTest();

            //test.listTest(api);

            //test.getTest(api, props);

            test.startTest(api, props);

            //test.versioTest(api);

            System.out.println("FINAL");

        } catch (ApiException e) {

            System.err.println("Class: " + e.getClass());
            System.err.println("Code:  " + e.getCode());
            System.err.println("Msg: " + e.getMessage());
            System.err.println("Body: " + e.getResponseBody());

            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected static EvidenciesApi getApi(Properties props) throws IOException {

        ApiClient apiclient = new ApiClient();

        //        SimpleModule modul = new SimpleModule();
        //        modul.addDeserializer(byte[].class, new MyByteArraySerializer());
        //        apiclient.getJSON().getContext(null).registerModule(modul);

        apiclient.setBasePath(props.getProperty("host"));

        apiclient.setUsername(props.getProperty("username"));
        apiclient.setPassword(props.getProperty("password"));

        apiclient.setDebugging(true);

        EvidenciesApi api = new EvidenciesApi(apiclient);

        return api;
    }

    /*
    public static class MyByteArraySerializer extends com.fasterxml.jackson.databind.JsonDeserializer<byte[]> {
        @Override
        public byte[] deserialize(JsonParser p, DeserializationContext ctx) throws IOException, JacksonException {
            
            
            System.out.println("\n\nMyByteArraySerializer ==> PASSA !!!!\n\n");
            
            String str = p.getText();
            
           return  Base64.decodeBase64(str);
            
        }
    }
    */

    /**
     * Retorna informació d&#x27;una evidència a partir del seu id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest(EvidenciesApi api, Properties props) throws ApiException, Exception {

        final Long evidenciaID = Long.parseLong(props.getProperty("test.evidenciaid"));

        final String language = props.getProperty("test.language");
        EvidenciaWs evi = api.get(evidenciaID, language);

        System.out.println(evi);

        System.out.println(" ------------- CHECK DATES ---------------");

        System.out.println("dataInici: " + evi.getDataInici());
        System.out.println("dataInici(Local Time " + ZoneId.systemDefault() + "): "
                + formatOffsetDateTimeToLocalTime(evi.getDataInici()));

        /*
        public static final int EVIDENCIA_ESTAT_CODI_ERROR = -1;
        public static final int EVIDENCIA_ESTAT_CODI_EN_PROCES_DE_CREACIO = 1;
        public static final int EVIDENCIA_ESTAT_CODI_EN_PROCES_DE_LOGIN = 2;
        public static final int EVIDENCIA_ESTAT_CODI_EN_PROCES_DE_FIRMA = 3;
        public static final int EVIDENCIA_ESTAT_CODI_SIGNAT = 10;
         */
        EvidenciaFile evifile;
        String type;
        if (evi.getEstatCodi() == getEVIDENCIAESTATCODISIGNAT()) {

            System.out.println(" ------------- DOWNLOAD SIGNED FILE ---------------");
            evifile = evi.getFitxerSignat();
            type = "SIGNED";
        } else {
            System.out.println(" ------------- DOWNLOAD ORIGINAL  FILE ---------------");
            evifile = evi.getFitxerOriginal();
            type = "ORIGINAL";
        }

        guardaFitxer(api, language, evidenciaID, evifile, type);

        /*
        
        
        File f = new File("EVI_" + evi.getEvidenciaID() + "_" + file.getName());
        
        FileOutputStream fos = new FileOutputStream(f);
        fos.write(Base64.decodeBase64(file.getDocumentBase64()));
        fos.flush();
        fos.close();
        System.out.println("Guardat Fitxer a " + f.getName());
        */

    }

    /**
     * NOTA: Mètode Copiat de la classe RestUtils de "PluginsIB-Utils::rest" 
     * @param odt
     * @return
     */
    public static String formatOffsetDateTimeToLocalTime(OffsetDateTime odt) {

        if (odt == null) {
            return null;
        }

        return odt.atZoneSameInstant(java.time.ZoneId.systemDefault()).toLocalDateTime().toString();
    }

    @Test
    public void versioTest(EvidenciesApi api) throws ApiException, Exception {

        String v = api.versio();

        System.out.println(v);
    }

    /**
     * Primera cridada a realitzar per iniciar un procés d&#x27;evidències
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startTest(EvidenciesApi api, Properties props) throws Exception, ApiException {

        int port = 1989 + (int) (Math.random() * 100.0);
        final String returnUrl = "http://localhost:" + port + "/returnurl/{0}";

        final String language = props.getProperty("test.language");

        EvidenciaStartRequest start = new EvidenciaStartRequest();

        start.setCallBackUrl(returnUrl);

        File f = new File(props.getProperty("test.pdftosign"));

        Path path = Paths.get(f.getAbsolutePath());

        byte[] docToSign = Files.readAllBytes(path);

        //byte[] docToSign = FileUtils.readFileToByteArray(f);

        EvidenciaFile ef = new EvidenciaFile();
        ef.setDescription(null);
        ef.setDocument(docToSign);
        ef.setEncryptedFileID(null);
        ef.setMime(MIME_APPLICATION_PDF);
        ef.setName(f.getName());
        ef.setSize((long) docToSign.length);

        start.setDocumentASignar(ef);
        start.setLanguageDocument(language);
        start.setLanguageUI(language);
        start.setPersonaLlinatge1("Gonella");
        start.setPersonaLlinatge2("Rondalles");
        start.setPersonaNom("Pep");
        start.setPersonaNif(props.getProperty("test.nif"));
        start.setPersonaEmail(props.getProperty("test.email"));
        start.setRaoDeLaFirma("Probva des de Api Client Java");
        start.setTitolEvidencia("Provar evidencies des de API");

        EvidenciaStartResponse response = api.start(start);

        System.out.println("EvidenciaID => " + response.getEvidenciaID());

        URI redirectUrl = response.getEvidenciaUrlRedirect();

        System.out.println("RedirectUrl = " + redirectUrl);

        if (Desktop.isDesktopSupported()) {
            Desktop.getDesktop().browse(redirectUrl);
        } else {
            System.out.println("Per favor obri un Navegador i copia-li la URL anterior ...");
        }

        readFromSocket(port);

        // TODO: test validations
        Long evidenciaID = response.getEvidenciaID();

        EvidenciaWs evi = api.get(evidenciaID, language);

        System.out.println(evi);

        if (evi.getEstatCodi() == 10) {

            guardaFitxer(api, language, evidenciaID, evi.getFitxerOriginal(), "FitxerOriginal");
            guardaFitxer(api, language, evidenciaID, evi.getFitxerSignat(), "FitxerSignat");

        }

    }

    protected File guardaFitxer(EvidenciesApi api, final String language, Long evidenciaID, EvidenciaFile efile,
            String fileType) throws ApiException, FileNotFoundException, IOException {

        if (efile == null) {

            return null;
        }

        String encryptedFile = efile.getEncryptedFileID();

        EvidenciaFileBase64 file = api.getfilebase64(evidenciaID, encryptedFile, language);

        File f = new File("EVI_" + evidenciaID + "_" + fileType + "_" + file.getName());

        FileOutputStream fos = new FileOutputStream(f);
        fos.write(Base64.decodeBase64(file.getDocumentBase64()));
        fos.flush();
        fos.close();

        System.out.println("Gardat Fitxer " + fileType + " a " + f.getName());
        return f;
    }

    /**
     * Retorna un llistat amb la informacio de les peticions de firma
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest(EvidenciesApi api) throws ApiException {
        String inici = null;
        String fi = null;
        Integer page = null;
        Integer pagesize = null;
        String language = null;
        EvidenciaWsPaginacio response = api.callList(inici, fi, page, pagesize, language);

        System.out.println(response);

    }

    public static void readFromSocket(int port) throws Exception {

        ServerSocket serverSocket = new ServerSocket(port);
        System.err.println("Servidor escoltant al PORT: " + port);
        {
            Socket clientSocket = serverSocket.accept();
            System.err.println("Nou Client Connectat desde " + clientSocket.getRemoteSocketAddress());

            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter out = new PrintWriter(
                    new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream())), true);

            String s;
            System.err.println(" =========================== ");
            while ((s = in.readLine()) != null) {
                System.out.println(s);
                break;
            }
            System.err.println(" =========================== ");

            out.println("HTTP/1.0 200 OK");
            out.println("Content-Type: text/html");
            out.println("\r\n");
            out.println(
                    "<html><body>OK (Revisi consola per saber l'estat final del proc&eacute;s de Firma)</body></html>");

            System.err.println("Connexio amb el client finalitzada.");
            out.flush();
            out.close();
            in.close();
            clientSocket.close();
        }

        serverSocket.close();
    }
}
